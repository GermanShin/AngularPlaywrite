pipeline {
    agent any

    parameters {
        choice(
            name: 'ENV',
            choices: ['dev', 'test', 'stg'],
            description: 'Select the environment to run Playwright tests against'
        )
    }

    environment {
        AWS_REGION = "ap-southeast-2"
        CODEBUILD_PROJECT = "PlaywrightProject938CE957-mPYWoqiDeDWu"
    }

    stages {
        stage('Echo Env File') {
        steps {
            echo "Selected env: ${params.ENV_FILE}"
        }
        }

        stage('Trigger CodeBuild') {
            steps {
                withAWS(credentials: 'david-shin-iam-user-cred', region: "${AWS_REGION}") {
                    script {
                         def slackNotify = {
                            String msg ->
                                // escape chars that would break JSON
                                def safe = msg.replace('\\', '\\\\').replace('"', '\\"')

                                withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'SLACK_WEBHOOK')]) {
                                                withEnv(["TEXT=${safe}"]) {
                                                sh(script: '''#!/bin/bash
                                                    set -euo pipefail
                                                    # Send JSON via stdin; avoid logging secrets
                                                    printf '{"text":"%s"}' "$TEXT" | curl -s -X POST -H "Content-type: application/json" --data @- "$SLACK_WEBHOOK" >/dev/null
                                                    ''')
                                                }
                                }
                        }

                        // Notify start (single-line triple-quoted string)
                        slackNotify("""▶️ Starting *CodeBuild* for `${env.JOB_NAME}` #${env.BUILD_NUMBER} — project: `${env.CODEBUILD_PROJECT}`, env: `${params.ENV}`""")

                        // Start build and get the build ID
                        def buildId = sh(
                            script: """
                                aws codebuild start-build \
                                    --project-name ${CODEBUILD_PROJECT} \
                                    --environment-variables-override name=TEST_ENV,value=${params.ENV} \
                                    --query 'build.id' --output text
                            """,
                            returnStdout: true
                        ).trim()

                        echo "Started CodeBuild with ID: ${buildId}"

                        def codebuildUrl = "https://console.aws.amazon.com/codesuite/codebuild/projects/${env.CODEBUILD_PROJECT}/build/${buildId}/log?region=${env.AWS_REGION}"

                        // Wait for build to finish
                        def status = "IN_PROGRESS"
                        while (status == "IN_PROGRESS" || status == "QUEUED") {
                            sleep(time: 10, unit: 'SECONDS')
                            status = sh(
                                script: """
                                    aws codebuild batch-get-builds \
                                        --ids ${buildId} \
                                        --query 'builds[0].buildStatus' \
                                        --output text
                                """,
                                returnStdout: true
                            ).trim()
                            echo "Current build status: ${status}"
                        }

                        // Fail Jenkins if CodeBuild failed
                        if (status != "SUCCEEDED") {
                            slackNotify("""❌ *CodeBuild FAILED* — `${env.JOB_NAME}` #${env.BUILD_NUMBER} | project: `${env.CODEBUILD_PROJECT}`, env: `${params.ENV}`, status: `${status}` (<${env.BUILD_URL}|Open Jenkins>) • (<${codebuildUrl}|Open CodeBuild>)""")
                            error("CodeBuild failed with status: ${status}")
                        } else {
                            slackNotify("""✅ *CodeBuild SUCCEEDED* — `${env.JOB_NAME}` #${env.BUILD_NUMBER} | project: `${env.CODEBUILD_PROJECT}`, env: `${params.ENV}` (<${env.BUILD_URL}|Open Jenkins>) • (<${codebuildUrl}|Open CodeBuild>)""")
                            echo "CodeBuild succeeded!"
                        }
                    }
                }
            }
        }
    }
}
